openapi: "3.0.2"
info:
  title: Notepad API
  version: "1.0.0"
  description: Uma simples API para cadastrar notas. O usuário deve logar-se na aplicação e pode cadasatrar, visualizar, editar e excluir suas notas. Além disso, ele também pode editar os seus dados e desativar sua conta.

tags:
  - name: Auth
    description: Dados referentes a login, cadastros e reativação de usuários
  - name: User
    description: Dados dos usuários cadastrados
  - name: Note
    description: Notas cadastradas pelos usuários

servers:
  - url: "http://localhost:8000"

security:
  - bearerAuth: []

components:
  responses:
    NoToken:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
              message:
                type: string
            example:
              statusCode: 422
              message: Você não tem acesso
  securitySchemes:
    bearearAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
          example: 1
        name:
          type: string
          example: Carlos
        email:
          type: string
          uniqueItems: true
          example: carlos@email.com
        hash:
          type: string
          example: $2b$10$UkHEs1EebYpskPKYkFDAFDA98889DVNDALldlsajkllHJdkdkcklç
        createdAt:
          type: string
          example: 2020-12-12
        updatedAt:
          type: string
          example: 2020-12-12
        deletedAt:
          type: string
          example: null
      required:
        - name
        - email
        - hash
    Note:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
          example: 1
        title:
          type: string
          example: Como fazer café?
        description:
          type: string
          example: Colocar pó e água quente
        userId:
          type: integer
          example: 50
        createdAt:
          type: string
          example: 2020-12-12
        updatedAt:
          type: string
          example: 2020-12-12
        deletedAt:
          type: string
          example: null
      required:
        - title
        - description
        - userId

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login de usuários
      description: Todo usuário precisa efetuar o login para cadastrar suas notas.
      operationId: Login
      requestBody:
        description: Dados de login
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              example:
                email: carlos@email.com
                password: "123456"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXAZS8.eyJpZCI6MSwiZW1haWwiOiJjYXJsb3NAZW1haQquY29tIiwiaWF0IjoxNjExODU5MDU2LCJleHAiOjE2MTI0NjM4WIA6.RXDuEpUlbVU2kOv-CXh2TfkxFGbM0Jf6SXpDU9jPOU9"
                  user:
                    type: object
                    $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 401
                message: Credencias incorretas
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
              example:
                statusCode: 404
                message: Usuário inexistente
  /auth/register:
    post:
      tags:
        - Auth
      summary: Cadastro de usuários
      description: Todo usuário não cadastro poderá se cadastrar na plataforma, informando os dados solicitados.
      operationId: Register
      requestBody:
        description: Dados para cadastro
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                confirmPass:
                  type: string
              example:
                name: Carlos
                email: carlos@email.com
                password: "123456"
                confirmPass: "123456"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                    example:
                      id: 23
                      name: John Doe
                      email: john@email.com
                  message:
                    type: string
                    example: Usuário criado com sucesso!
        401:
          description: Unathorized
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Senha é obrigatória
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Confirmação de senha é obrigatória
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: As senhas não correspondem
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Esse usuário já existe
  /auth/reactive:
    post:
      tags:
        - Auth
      summary: Reativar usuário
      description: Um usuário pode desativar a sua conta e reativá-la.
      operationId: Reactive
      requestBody:
        description: Dados para reativar conta
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: carlos@email.com
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                    example: Sua conta foi reativada!
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                example:
                  statusCode: 404
                  message: Usuário inexistente
  /users/profile:
    get:
      tags:
        - User
      summary: Pegar dados do usuário logado
      description: O usuário logado terá acesso as suas informações.
      operationId: User Profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        422:
          $ref: "#/components/responses/NoToken"
  /users:
    put:
      tags:
        - User
      summary: Atualizar usuário
      description: O usuário logado pode atualizar as suas informações cadastradas.
      operationId: Update User
      security:
        - bearearAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                oldPass:
                  type: string
                password:
                  type: string
                confirmPass:
                  type: string
              example:
                name: Jane
                email: jane@email.com
                oldPass: Jane123
                password: JaneDoe
                confirmPass: JaneDoe
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Conta atualizada com sucesso
        401:
          description: Unathorized
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Usuário já existe
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Senha incorreta
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: Nova senha não pode ser igual a senha atual
                  - type: object
                    properties:
                      statusCode:
                        type: integer
                      message:
                        type: string
                    example:
                      statusCode: 401
                      message: As senhas não correspondem
        422:
          $ref: "#/components/responses/NoToken"
    delete:
      tags:
        - User
      summary: Desativar usuário
      description: O usuário logado pode desativar a sua conta.
      operationId: Delete User
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
        422:
          $ref: "#/components/responses/NoToken"
  /notes:
    get:
      tags:
        - Note
      summary: Pegar todas as notas criadas
      description: O usuário pode buscar todas as suas notas
      operationId: Get Notes
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        422:
          $ref: "#/components/responses/NoToken"
    post:
      tags:
        - Note
      summary: Cadastrar nota
      description: O usuário pode cadastrar suas notas. Elas devem ter título e descrição.
      operationId: Post Notes
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  note:
                    type: object
                    $ref: "#/components/schemas/Note"
                  message:
                    type: string
                    example: Nota criada com sucesso
        422:
          $ref: "#/components/responses/NoToken"
  /notes/{id}:
    get:
      tags:
        - Note
      summary: Pegar uma nota
      description: O usuário pode buscar uma nota específica
      operationId: Get One Note
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          example: 56
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        422:
          $ref: "#/components/responses/NoToken"
    put:
      tags:
        - Note
      summary: Editar uma nota
      description: O usuário pode editar uma nota específica
      operationId: Update Note
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          example: 45
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Nota editada com sucesso
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                example:
                  statusCode: 404
                  message: Nota não encontrada
        422:
          $ref: "#/components/responses/NoToken"
    delete:
      tags:
        - Note
      summary: Deletar uma nota
      description: O usuário pode deletar uma nota específica
      operationId: Delete Note
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          example: 21
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Nota deletada com sucesso
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                example:
                  statusCode: 404
                  message: Nota não encontrada
        422:
          $ref: "#/components/responses/NoToken"
